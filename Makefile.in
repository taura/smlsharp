srcdir = @srcdir@
VPATH = @srcdir@

include config.mk
include src/config.mk
include @srcdir@/files.mk

MLYACC = src/ml-yacc/smlyacc
MLLEX = src/ml-lex/smllex
SMLFORMAT = src/smlformat/smlformat
SMLSHARP_STAGE2 = src/compiler/smlsharp
LLVM_PLUGIN = src/llvm/smlsharp_gc.$(DLLEXT)

SMLSHARP_ENV = SMLSHARP_HEAPSIZE=32M:2G

NETLIB_CFLAGS = $(CFLAGS) -DIEEE_8087 -DMALLOC=sml_xmalloc -DLong=int
NETLIB_SOURCES = src/runtime/netlib/dtoa.c
RUNTIME_SOURCES = \
    src/runtime/callback.c \
    src/runtime/control.c \
    src/runtime/error.c \
    src/runtime/exn.c \
    src/runtime/finalize.c \
    src/runtime/init.c \
    src/runtime/object.c \
    src/runtime/xmalloc.c \
    src/runtime/prim.c \
    src/runtime/splay.c \
    src/runtime/top.c \
    src/runtime/dump.c \
    src/runtime/livecheck.c \
    $(NETLIB_SOURCES) \
    src/runtime/heap_concurrent.c \
    src/sql/main/builtintypes/timestamp/string_to_time_t.c \
    src/sql/main/builtintypes/timestamp/timeval_to_string.c
RUNTIME_OBJECTS = \
    $(RUNTIME_SOURCES:.c=.$(OBJEXT))
RUNTIME_TARGETS = \
    src/runtime/main.$(OBJEXT) \
    src/runtime/libsmlsharp.$(LIBEXT)
COMPILER_SUPPORT_SOURCES = \
    src/llvm/main/llvm_support.cpp
COMPILER_SUPPORT_OBJECTS = \
    $(COMPILER_SUPPORT_SOURCES:.cpp=.$(OBJEXT))
LLVM_PLUGIN_SOURCES = \
    src/llvm/main/smlsharp_gc.cpp
LLVM_PLUGIN_OBJECTS = \
    $(LLVM_PLUGIN_SOURCES:.cpp=.$(OBJEXT))
ALL_GEN_SOURCES = \
    $(GEN_SOURCES) \
    src/config/main/Version.sml \
    src/config/main/PointerSize.sml
ALL_GEN_FILES = \
    $(ALL_GEN_SOURCES) \
    filemap \
    precompiled/$(PRECOMPILED_ARCH).bc \
    precompiled/$(PRECOMPILED_ARCH).$(OBJEXT) \
    minismlsharp \
    src/config.sed
SML_TARGETS = \
    $(RUNTIME_TARGETS) \
    $(LLVM_PLUGIN) \
    $(MLLEX) \
    $(MLYACC) \
    $(SMLFORMAT) \
    $(SMLSHARP_STAGE2)
ALL_TARGETS = \
    Makefile \
    config.mk \
    src/config.mk \
    $(SML_TARGETS) \
    $(INSTALL_FILES_SRC) \
    $(INSTALL_FILES_OBJ)
LINK_DEP = \
    filemap \
    src/config.mk \
    $(RUNTIME_TARGETS) \
    $(LLVM_PLUGIN) \
    $(SMLSHARP_DEP)

all: $(ALL_TARGETS)

clean: PHONY
	-rm -f $(SML_TARGETS)
	-rm -f $(RUNTIME_OBJECTS)
	-rm -f $(COMPILER_SUPPORT_OBJECTS) $(LLVM_PLUGIN_OBJECTS)
	-rm -f $(ALL_OBJECTS) $(ALL_GEN_SOURGES) $(CLEAN_FILES)
	-rm -f $(ALL_GEN_FILES)
	-rm -f tests/driver/process.$(OBJEXT)
@SNAPDATE_RULE_@	-rm -f RELEASE_DATE

distclean: clean
	-rm -rf autom4te.cache config.h config.log config.status
	-rm -f Makefile config.mk src/config.mk stamp-h

sources: PHONY $(ALL_GEN_SOURCES)
runtime: PHONY $(RUNTIME_TARGETS)

install: $(ALL_TARGETS)
	$(INSTALL) -m 755 -d '$(DESTDIR)$(libdir_smlsharp)'
	$(INSTALL_PROGRAM) -m 644 src/config.mk \
	  '$(DESTDIR)$(libdir_smlsharp)/config.mk'
	$(INSTALL) -m 755 -d '$(DESTDIR)$(libdir_smlsharp)/runtime'
	$(INSTALL_PROGRAM) -m 644 src/runtime/libsmlsharp.$(LIBEXT) \
	  '$(DESTDIR)$(libdir_smlsharp)/runtime'
	$(INSTALL_PROGRAM) -m 644 src/runtime/main.$(OBJEXT) \
	  '$(DESTDIR)$(libdir_smlsharp)/runtime'
	$(INSTALL_PROGRAM) -m 644 $(srcdir)/src/builtin.smi \
	  '$(DESTDIR)$(libdir_smlsharp)/builtin.smi'
	if test -f src/compiler/smlsharp.lib; then \
	  $(INSTALL) -m 755 -d '$(DESTDIR)$(libdir_smlsharp)/compiler'; \
	  $(INSTALL_PROGRAM) -m 644 src/compiler/smlsharp.lib \
	    '$(DESTDIR)$(libdir_smlsharp)/compiler'; else :; fi
	$(INSTALL) -m 755 -d '$(DESTDIR)$(libdir_smlsharp)/llvm'
	$(INSTALL_PROGRAM) -m 755 src/llvm/smlsharp_gc.$(DLLEXT) \
	  '$(DESTDIR)$(libdir_smlsharp)/llvm/smlsharp_gc.$(DLLEXT)'
	@copy () { \
	  if test ! -d "$$2"; then \
	    echo $(INSTALL) -m 755 -d "$$2"; \
	    $(INSTALL) -m 755 -d "$$2" || exit $?; \
	  fi; \
	  echo $(INSTALL_DATA) "$$1" "$$2"; \
	  $(INSTALL_DATA) "$$1" "$$2" || exit $?; \
	}; \
	for i in $(INSTALL_FILES_SRC); do \
	  d=`dirname "$$i" | sed 's,^src/*,,'`; \
	  copy '$(srcdir)/'"$$i" '$(DESTDIR)$(libdir_smlsharp)/'"$$d"; \
	done; \
	for i in $(INSTALL_FILES_OBJ); do \
	  d=`dirname "$$i" | sed 's,^src/*,,'`; \
	  copy "$$i" '$(DESTDIR)$(libdir_smlsharp)/'"$$d"; \
	done
	$(INSTALL) -m 755 -d '$(DESTDIR)$(bindir)'
	$(INSTALL_PROGRAM) -m 755 $(MLLEX) '$(DESTDIR)$(bindir)'
	$(INSTALL_PROGRAM) -m 755 $(MLYACC) '$(DESTDIR)$(bindir)'
	$(INSTALL_PROGRAM) -m 755 $(SMLFORMAT) '$(DESTDIR)$(bindir)'
	$(INSTALL_PROGRAM) -m 755 $(SMLSHARP_STAGE2) '$(DESTDIR)$(bindir)'

test: tests/driver/dotest PHONY
	$(SMLSHARP_ENV) tests/driver/dotest

# -------- implicit rules --------

PHONY: # force to rebuild

.SUFFIXES: .c .h .o .a .sml .ppg .ppg.sml .lex .grm .lex.sml .grm.sml

.sml.o:
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) -c -o $@ $<
.ppg.ppg.sml:
	$(SMLSHARP_ENV) $(SMLFORMAT) --output=$@ $<
.lex.lex.sml:
	$(SMLSHARP_ENV) SMLLEX_OUTPUT=$@ $(MLLEX) $<
.grm.grm.sml:
	$(SMLSHARP_ENV) SMLYACC_OUTPUT=$@ $(MLYACC) $<
.c.o:
	$(CC) $(CFLAGS) $(DEFS) $(CPPFLAGS) -c -o $@ $<

# -------- runtime --------

src/runtime/libsmlsharp.$(LIBEXT): $(RUNTIME_OBJECTS)
	-rm -f $@
	$(AR) qc $@ $(RUNTIME_OBJECTS)
	-$(RANLIB) $@

src/runtime/netlib/dtoa.o: src/runtime/netlib/dtoa.c
	$(CC) $(NETLIB_CFLAGS) -c -o $@ $(srcdir)/src/runtime/netlib/dtoa.c

src/runtime/exn.o: src/runtime/exn.c
	$(CC) $(CFLAGS) -fexceptions $(DEFS) $(CPPFLAGS) -c -o $@ $(srcdir)/src/runtime/exn.c

# -------- compiler support --------

src/llvm/main/llvm_support.$(OBJEXT): src/llvm/main/llvm_support.cpp
	$(CXX) $(LLVM_CXXFLAGS) -c -o $@ $(srcdir)/src/llvm/main/llvm_support.cpp

src/llvm/main/smlsharp_gc.$(OBJEXT): src/llvm/main/smlsharp_gc.cpp
	$(CXX) $(LLVM_CXXFLAGS) -c -o $@ $(srcdir)/src/llvm/main/smlsharp_gc.cpp

src/llvm/smlsharp_gc.$(DLLEXT): src/llvm/main/smlsharp_gc.$(OBJEXT)
	$(CXX) $(RUNLOOP_DLDFLAGS) -o $@ src/llvm/main/smlsharp_gc.$(OBJEXT)

tests/driver/process.$(OBJEXT): tests/driver/process.c
	$(CC) $(CFLAGS) $(DEFS) $(CPPFLAGS) -c -o $@ $(srcdir)/tests/driver/process.c

# -------- link file map --------

filemap: files.mk
	sed '1,/^ALL_OBJECTS =/d;/ =/,$$d;s, *\\*$$,,;s,\(.*\)\.[a-z]*$$,$(srcdir)/\1.smi &,' files.mk > $@

# -------- executables --------

src/ml-lex/smllex: $(LINK_DEP) $(MLLEX_OBJECTS)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) \
	-filemap=filemap \
	$(srcdir)/src/ml-lex/ml-lex.smi -o $@

src/ml-yacc/smlyacc: $(LINK_DEP) $(MLYACC_OBJECTS)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) \
	-filemap=filemap \
	$(srcdir)/src/ml-yacc/src/ml-yacc.smi -o $@

src/smlformat/smlformat: $(LINK_DEP) $(SMLFORMAT_OBJECTS)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) \
	-filemap=filemap \
	$(srcdir)/src/smlformat/generator/main/call-main.smi -o $@

src/compiler/smlsharp: $(LINK_DEP) $(COMPILER_SUPPORT_OBJECTS) \
                       $(COMPILER_LIB_OBJECTS)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) \
	-filemap=filemap \
	$(RDYNAMIC_LDFLAGS) $(LLVM_SMLSHARP_LDFLAGS) --link-all \
	$(srcdir)/src/compiler/smlsharp.smi \
	$(COMPILER_SUPPORT_OBJECTS) $(LLVM_LIBS) $(LLVM_SYSLIBS) -o $@

src/compiler/minismlsharp: $(LINK_DEP) $(COMPILER_SUPPORT_OBJECTS) \
                           $(MINISMLSHARP_OBJECTS)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFLAGS) \
	-filemap=filemap $(LLVM_SMLSHARP_LDFLAGS) \
	$(srcdir)/src/compiler/minismlsharp.smi \
	$(COMPILER_SUPPORT_OBJECTS) $(LLVM_LIBS) $(LLVM_SYSLIBS) -o $@

precompiled/$(PRECOMPILED_ARCH).bc: precompiled/$(PRECOMPILED_ARCH).ll.xz
	$(XZ) -c -d $(srcdir)/precompiled/$(PRECOMPILED_ARCH).ll.xz \
	| $(LLVM_AS) -o $@

precompiled/$(PRECOMPILED_ARCH).$(OBJEXT): $(LLVM_PLUGIN) \
                                           precompiled/$(PRECOMPILED_ARCH).bc
	$(LLC) -load=$(LLVM_PLUGIN) -mtriple=$(TARGET_TRIPLE) -O2 \
	-relocation-model=pic \
	-tailcallopt -filetype=obj -o $@ precompiled/$(PRECOMPILED_ARCH).bc

./minismlsharp: $(RUNTIME_TARGETS) $(COMPILER_SUPPORT_OBJECTS) \
                precompiled/$(PRECOMPILED_ARCH).$(OBJEXT)
	$(CXX) $(LDFLAGS) $(LLVM_LDFLAGS) \
	precompiled/$(PRECOMPILED_ARCH).$(OBJEXT) \
	$(COMPILER_SUPPORT_OBJECTS) $(RUNTIME_TARGETS) \
	$(LLVM_LIBS) $(LLVM_SYSLIBS) $(LIBS) -o $@

tests/driver/dotest: $(LINK_DEP) $(TEST_OBJECTS) tests/driver/process.$(OBJEXT)
	$(SMLSHARP_ENV) $(SMLSHARP_STAGE1) -Bsrc -nostdpath $(SMLFILE) \
	-filemap=filemap \
	$(RDYNAMIC_LDFLAGS) $(LLVM_SMLSHARP_LDFLAGS) --link-all \
	$(srcdir)/tests/driver/dotest.smi \
	tests/driver/process.$(OBJEXT) \
	$(COMPILER_SUPPORT_OBJECTS) $(LLVM_LIBS) $(LLVM_SYSLIBS) -o $@

# -------- source code generation --------

@SNAPDATE_RULE_@RELEASE_DATE: $(srcdir)/../.hg/dirstate
@SNAPDATE_RULE_@	set -e; \
@SNAPDATE_RULE_@	r=`HGPLAIN=1 hg log -r. --template '{date|isodatesec} {node|short}'`; \
@SNAPDATE_RULE_@	echo "$$r" | sed s/+0900/JST/ > $@

src/config.sed: config.mk src/config.mk Makefile VERSION RELEASE_DATE
	{ echo 'VERSION = '`cat VERSION`; \
	  echo 'RELEASE_DATE = '`cat RELEASE_DATE`; \
	  echo 'LIBDIR_SMLSHARP = $(libdir_smlsharp)'; \
	  cat src/config.mk; \
	  sed -n '/^SIZEOF_VOID_P/p' config.mk; } \
	| sed 's/["\\]/\\\\\\&/g;s/^/s"%/;s/ = /%"/;s/$$/";/' > $@

src/config/main/Version.sml : src/config.sed src/config/main/Version.sml.in
	sed -f src/config.sed $(srcdir)/src/config/main/Version.sml.in > $@
src/config/main/PointerSize.sml : src/config.sed \
                                  src/config/main/PointerSize.sml.in
	sed -f src/config.sed $(srcdir)/src/config/main/PointerSize.sml.in > $@

# ---- autoconf ----

CHECK_GNUMAKE = \
    if $(MAKE) --version 2> /dev/null | grep 'GNU Make' > /dev/null; \
    then :; else echo 'Makefiles are updated, rerun make.'; exit 1; fi

$(srcdir)/configure: configure.ac
	cd '$(srcdir)' && autoconf

config.status: configure
	./config.status --recheck

Makefile: Makefile.in config.status
	./config.status Makefile
	@$(CHECK_GNUMAKE)

config.mk: config.mk.in config.status
	./config.status $@
	@$(CHECK_GNUMAKE)

src/config.mk: src/config.mk.in config.status
	./config.status $@
	@$(CHECK_GNUMAKE)

$(srcdir)/stamp-h.in: configure.ac
	cd '$(srcdir)' && autoheader
	echo timestamp > '$(srcdir)/stamp-h.in'
$(srcdir)/config.h.in: stamp-h.in

stamp-h: config.h.in config.status
	./config.status config.h stamp-h
config.h: stamp-h

# -------- dependencies --------

depend: depend_ml.mk depend_c.mk
	rm -f $(srcdir)/files.mk
	cp files_ml.mk $(srcdir)/files.mk
	rm -f $(srcdir)/depend.mk
	cat depend_ml.mk depend_c.mk > $(srcdir)/depend.mk
	rm -f files_ml.mk depend_ml.mk depend_c.mk

depend_ml.mk files_ml.mk: PHONY
	-rm -f depend_ml.mk files_ml.mk
	@$(SMLSHARP_ENV) SMLSHARP='$(SMLSHARP_STAGE1)' OBJEXT='$(OBJEXT)' \
	files_mk=files_ml.mk depend_mk=depend_ml.mk SMLFLAGS='$(SMLFLAGS)' \
	$(SHELL) mkdepend \
	  MLLEX          src/ml-lex/ml-lex.smi \
	  MLYACC_LIB     src/ml-yacc-lib.smi \
	  MLYACC         src/ml-yacc/src/ml-yacc.smi \
	  SMLFORMAT_LIB  src/smlformat-lib.smi \
	  SMLUNIT_LIB    src/smlunit-lib.smi \
	  SMLFORMAT      src/smlformat/generator/main/call-main.smi \
	  MINISMLSHARP   src/compiler/minismlsharp.smi \
	  COMPILER_LIB   src/compiler/smlsharp.smi \
	  PRELUDE_LIB    src/prelude.smi \
	  THREAD_LIB     src/thread.smi \
	  TEST           tests/driver/dotest.smi

depend_c.mk: PHONY
	-rm -f depend_c.mk
	@for i in $(RUNTIME_SOURCES) src/runtime/main.c; do \
	  case "$$i" in *.cpp) cc='$(CXX)';; *) cc='$(CC)';; esac; \
	  echo $$cc -E -MM $(DEFS) $(CPPFLAGS) $(srcdir)/$$i 1>&2; \
	  $$cc -E -MM $(DEFS) $(CPPFLAGS) $(srcdir)/$$i \
	  | perl -0npe 's,\A.*?\.(.*?:(?:\s|\\)*)(.*?)\.c,\2.\1\2.c,; \
	                s,\s/.*?\.h(?=\s),,g; \
	                s,(?:\s*\\\s+)+, \\\n ,g; \
	                s,(?:\s*\\\s*)+\z,\n,g' \
	    >> depend_c.mk; \
	done

include @srcdir@/depend.mk
@INCLUDE_STAGE1@include @srcdir@/stage1.mk
